function x(r,s){return{value:r,key:s(r)}}function u(r,s,e=0){return{startVertex:r,endVertex:s,weight:e}}function g(r=!1){return Object.freeze({isDirected:r,vertices:[],edges:[],createGraphEdge:u,createGraphVertex:x,addVertex(e){let t=this.getVertex(e.key);return t?(t.value=e.value,this):(this.vertices.push(e),this)},getVertex(e){return this.vertices.find(t=>t.key===e)},addEdge(e){return this.addVertex(e.startVertex).addVertex(e.endVertex).edges.push(e),this},neighbors(e){return this.edges.filter(t=>t.startVertex===e||t.endVertex===e)},toJSON(){let{isDirected:e}=this,{vertices:t,edges:h}=this,i=t.map(a=>{let{key:n,value:p}=a;return{key:n,value:p}}),c=h.map(a=>{let{startVertex:n,endVertex:p,weight:d}=a;return{start:n.key,end:p.key,weight:d}});return{isDirected:e,vertices:i,edges:c}}})}export{x as a,u as b,g as c};
